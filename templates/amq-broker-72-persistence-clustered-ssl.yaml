apiVersion: v1
kind: Template
labels:
  template: amq-broker-72-persistence-clustered-ssl
  xpaas: 1.4.16
message: A new messaging service with SSL support has been created in your project. It will handle the protocol(s) "${AMQ_PROTOCOL}". The username/password for accessing the service is ${AMQ_USER}/${AMQ_PASSWORD}. Please be sure to create a secret named "${AMQ_SECRET}" containing the trust store and key store files ("${AMQ_TRUSTSTORE}" and "${AMQ_KEYSTORE}") used for serving secure content.
metadata:
  annotations:
    description: Application template for Red Hat AMQ brokers. This template supports SSL and requires usage of OpenShift secrets.
    iconClass: icon-amq
    openshift.io/display-name: Red Hat AMQ Broker 7.2 (Persistence, clustered, with SSL)
    openshift.io/provider-display-name: Red Hat, Inc.
    tags: messaging,amq,xpaas
    template.openshift.io/documentation-url: 'https://access.redhat.com/documentation/en/red-hat-amq/'
    template.openshift.io/long-description: >-
      This template defines resources needed to develop a Red Hat AMQ Broker 7.2 based application, including a statefulset configuration, using persistent storage and secure communication using SSL.
    template.openshift.io/support-url: 'https://access.redhat.com'    
    version: 1.4.16
  name: amq-broker-72-persistence-clustered-ssl
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${APPLICATION_NAME}-service-account
    labels:
      app: ${APPLICATION_NAME}
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: Role
  metadata:
    name: ${APPLICATION_NAME}-role
    labels:
      app: ${APPLICATION_NAME}
  rules:
  - apiGroups:
    - ""
    resources:
    - endpoints
    verbs:
    - create
    - delete
    - deletecollection
    - get
    - list
    - patch
    - update
    - watch
  - apiGroups:
    - ""
    resources:
    - namespaces
    verbs:
    - get
    - list
- apiVersion: rbac.authorization.k8s.io/v1beta1
  kind: RoleBinding
  metadata:
    name: ${APPLICATION_NAME}-role-binding
    labels:
      app: ${APPLICATION_NAME}
  subjects:
    - kind: ServiceAccount
      name: ${APPLICATION_NAME}-service-account
  roleRef:
    kind: Role
    name: ${APPLICATION_NAME}-role
    apiGroup: rbac.authorization.k8s.io
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The broker's headless, non load balanced service
    labels:
      application: ${APPLICATION_NAME}
      app: ${APPLICATION_NAME}
    name: ${AMQ_NAME}-amq-headless
  spec:
    clusterIP: None
    publishNotReadyAddresses: true
    ports:
    - port: 61616
      name: all
      protocol: TCP
      targetPort: 61616
    - port: 8161
      name: console-jolokia
      protocol: TCP
      targetPort: 8161
    - port: 5672
      name: amqp
      protocol: TCP
      targetPort: 5672
    - port: 1883
      name: mqtt
      protocol: TCP
      targetPort: 1883
    - port: 61613
      name: stomp
      protocol: TCP
      targetPort: 61613
    - port: 61617
      name: all-ssl
      protocol: TCP
      targetPort: 61617
    - port: 5671
      name: amqp-ssl
      protocol: TCP
      targetPort: 5671
    - port: 8883
      name: mqtt-ssl
      protocol: TCP
      targetPort: 8883
    - port: 61612
      name: stomp-ssl
      protocol: TCP
      targetPort: 61612
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The JGroups ping port for clustering.
      service.alpha.kubernetes.io/tolerate-unready-endpoints: 'true'
    labels:
      application: ${APPLICATION_NAME}
    name: ping
  spec:
    clusterIP: None  
    ports:
      - targetPort: 8888
        port: 8888
    selector:
      deploymentConfig: ${APPLICATION_NAME}-amq      
- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}-amq
    annotations:
      alpha.image.policy.openshift.io/resolve-names: '*'
      statefulsets.kubernetes.io/drainer-pod-template: |
        {
          "metadata": {
            "labels": {
              "app": "${APPLICATION_NAME}-amq-drainer"
            }
          },
          "spec": {
            "serviceAccount": "${APPLICATION_NAME}-service-account",
            "serviceAccountName": "${APPLICATION_NAME}-service-account",
            "terminationGracePeriodSeconds": 5,
            "containers": [
              {
                "env": [
                  {
                    "name": "AMQ_EXTRA_ARGS",
                    "value": "--no-autotune"
                  },
                  {
                    "name": "AMQ_USER",
                    "value": "${AMQ_USER}"
                  },
                  {
                    "name": "AMQ_PASSWORD",
                    "value": "${AMQ_PASSWORD}"
                  },
                  {
                    "name": "AMQ_ROLE",
                    "value": "${AMQ_ROLE}"
                  },
                  {
                    "name": "AMQ_NAME",
                    "value": "${AMQ_NAME}"
                  },
                  {
                    "name": "AMQ_TRANSPORTS",
                    "value": "${AMQ_PROTOCOL}"
                  },
                  {
                    "name": "AMQ_QUEUES",
                    "value": "${AMQ_QUEUES}"
                  },
                  {
                    "name": "AMQ_ADDRESSES",
                    "value": "${AMQ_ADDRESSES}"
                  },
                  {
                    "name": "AMQ_GLOBAL_MAX_SIZE",
                    "value": "${AMQ_GLOBAL_MAX_SIZE}"
                  },
                  {
                    "name": "AMQ_ALLOW_ANONYMOUS",
                    "value": "${AMQ_ALLOW_ANONYMOUS}"
                  },
                  {
                    "name": "AMQ_DATA_DIR",
                    "value": "${AMQ_DATA_DIR}"
                  },
                  {
                    "name": "AMQ_DATA_DIR_LOGGING",
                    "value": "true"
                  },
                  {
                    "name": "AMQ_CLUSTERED",
                    "value": "${AMQ_CLUSTERED}"
                  },
                  {
                    "name": "AMQ_REPLICAS",
                    "value": "${AMQ_REPLICAS}"
                  },
                  {
                    "name": "AMQ_CLUSTER_USER",
                    "value": "${AMQ_CLUSTER_USER}"
                  },
                  {
                    "name": "AMQ_CLUSTER_PASSWORD",
                    "value": "${AMQ_CLUSTER_PASSWORD}"
                  },
                  {
                    "name": "POD_NAMESPACE",
                    "valueFrom": {
                      "fieldRef": {
                        "fieldPath": "metadata.namespace"
                      }
                    }
                  },
                  {
                    "name": "OPENSHIFT_DNS_PING_SERVICE_PORT",
                    "value": "8888"
                  }
                ],
                "image": "${IMAGE}",
                "name": "${APPLICATION_NAME}-amq",

                "command": ["/bin/sh", "-c", "echo \"Starting the drainer\" ; /opt/amq/bin/drain.sh; echo \"Drain completed! Exit code $?\""],
                "volumeMounts": [
                  {
                    "name": "${APPLICATION_NAME}-amq-pvol",
                    "mountPath": "${AMQ_DATA_DIR}"
                  }
                ]
              }
            ]
          }
        }
  spec:
    podManagementPolicy: OrderedReady
    replicas: ${AMQ_REPLICAS}
    selector:
      matchLabels:
        app: ${APPLICATION_NAME}-amq
    strategy:
      rollingParams:
        maxSurge: 0
      type: Rolling
    serviceName: ${AMQ_NAME}-amq-headless
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}-amq
          app: ${APPLICATION_NAME}-amq
        name: ${APPLICATION_NAME}-amq
      spec:
        containers:
        - env:
          - name: AMQ_USER
            value: ${AMQ_USER}
          - name: AMQ_PASSWORD
            value: ${AMQ_PASSWORD}
          - name: AMQ_ROLE
            value: ${AMQ_ROLE}
          - name: AMQ_NAME
            value: ${AMQ_NAME}
          - name: AMQ_TRANSPORTS
            value: ${AMQ_PROTOCOL}
          - name: AMQ_QUEUES
            value: ${AMQ_QUEUES}
          - name: AMQ_ADDRESSES
            value: ${AMQ_ADDRESSES}
          - name: AMQ_KEYSTORE_TRUSTSTORE_DIR
            value: /etc/amq-secret-volume
          - name: AMQ_TRUSTSTORE
            value: ${AMQ_TRUSTSTORE}
          - name: AMQ_TRUSTSTORE_PASSWORD
            value: ${AMQ_TRUSTSTORE_PASSWORD}
          - name: AMQ_KEYSTORE
            value: ${AMQ_KEYSTORE}
          - name: AMQ_KEYSTORE_PASSWORD
            value: ${AMQ_KEYSTORE_PASSWORD}
          - name: AMQ_GLOBAL_MAX_SIZE
            value: ${AMQ_GLOBAL_MAX_SIZE}
          - name: AMQ_REQUIRE_LOGIN
            value: ${AMQ_REQUIRE_LOGIN}
          - name: AMQ_DATA_DIR
            value: ${AMQ_DATA_DIR}
          - name: AMQ_DATA_DIR_LOGGING
            value: ${AMQ_DATA_DIR_LOGGING}
          - name: AMQ_CLUSTERED
            value: ${AMQ_CLUSTERED}
          - name: AMQ_REPLICAS
            value: ${AMQ_REPLICAS}
          - name: AMQ_CLUSTER_USER
            value: ${AMQ_CLUSTER_USER}
          - name: AMQ_CLUSTER_PASSWORD
            value: ${AMQ_CLUSTER_PASSWORD}
          - name: AMQ_EXTRA_ARGS
            value: ${AMQ_EXTRA_ARGS}
          - name: AMQ_ANYCAST_PREFIX
            value: ${AMQ_ANYCAST_PREFIX}
          - name: AMQ_MULTICAST_PREFIX
            value: ${AMQ_MULTICAST_PREFIX}
          - name: BROKER_XML
            value: ${BROKER_XML}
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          readinessProbe:
            exec:
              command:
              - "/bin/bash"
              - "-c"
              - "/opt/amq/bin/readinessProbe.sh"
          image: ${IMAGE}              
          name: ${APPLICATION_NAME}-amq
          ports:
          - containerPort: 8161
            name: console-jolokia
            protocol: TCP
          - containerPort: 5672
            name: amqp
            protocol: TCP
          - containerPort: 5671
            name: amqp-ssl
            protocol: TCP
          - containerPort: 1883
            name: mqtt
            protocol: TCP
          - containerPort: 8883
            name: mqtt-ssl
            protocol: TCP
          - containerPort: 61613
            name: stomp
            protocol: TCP
          - containerPort: 61612
            name: stomp-ssl
            protocol: TCP
          - containerPort: 61616
            name: all
            protocol: TCP
          - containerPort: 61617
            name: all-ssl
            protocol: TCP
          volumeMounts:
          - name: ${APPLICATION_NAME}-amq-pvol
            mountPath: ${AMQ_DATA_DIR}
          - mountPath: /etc/amq-secret-volume
            name: broker-secret-volume
            readOnly: true
        terminationGracePeriodSeconds: 60
        volumes:
        - name: broker-secret-volume
          secret:
            secretName: ${AMQ_SECRET}
    volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: ${APPLICATION_NAME}-amq-pvol
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: ${VOLUME_CAPACITY}
    triggers:
    - type: ConfigChange
parameters:
- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: broker
- description: 'Protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp`, `mqtt` and `hornetq`.'
  displayName: AMQ Protocols
  name: AMQ_PROTOCOL
  value: openwire,amqp,stomp,mqtt,hornetq
- description: Queue names, separated by commas. These queues will be automatically created when the broker starts. If left empty, queues will be still created dynamically.
  displayName: Queues
  name: AMQ_QUEUES
- description: Address names, separated by commas. These addresses will be automatically created when the broker starts. If left empty, addresses will be still created dynamically.
  displayName: Addresses
  name: AMQ_ADDRESSES
- description: Size of the volume used by AMQ for persisting messages.
  displayName: AMQ Volume Size
  name: VOLUME_CAPACITY
  value: 1Gi
  required: true
- description: User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
  displayName: AMQ Username
  from: user[a-zA-Z0-9]{3}
  generate: expression
  name: AMQ_USER
- description: Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.
  displayName: AMQ Password
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: AMQ_PASSWORD
- description: User role for standard broker user.
  displayName: AMQ Role
  name: AMQ_ROLE
  value: admin
- description: The name of the broker
  displayName: AMQ Name
  name: AMQ_NAME
  value: broker
- description: Clustered
  displayName: clustered
  name: AMQ_CLUSTERED
  value: 'true'
- description: Number of broker replicas for a cluster
  displayName: Number of Replicas
  name: AMQ_REPLICAS
  value: '0'
- description: Clustered user
  displayName: cluster user
  from: user[a-zA-Z0-9]{3}
  generate: expression  
  name: AMQ_CLUSTER_USER
- description: Clustered password
  displayName: cluster password
  from: '[a-zA-Z0-9]{8}'
  generate: expression  
  name: AMQ_CLUSTER_PASSWORD
- description: "Maximum amount of memory which message data may consume (Default: Undefined, half of the system's memory)."
  displayName: AMQ Global Max Size
  name: AMQ_GLOBAL_MAX_SIZE
  value: 100 gb
- description: "Determines whether or not the broker will allow anonymous access, or require login"
  displayName: AMQ Require Login
  name: AMQ_REQUIRE_LOGIN
- description: Name of a secret containing SSL related files
  displayName: Secret Name
  name: AMQ_SECRET
  required: true
  value: amq-app-secret
- description: SSL trust store filename
  displayName: Trust Store Filename
  name: AMQ_TRUSTSTORE
  required: true
  value: broker.ts
- description: SSL trust store password
  displayName: Trust Store Password
  name: AMQ_TRUSTSTORE_PASSWORD
  required: true
- description: SSL key store filename
  displayName: AMQ Keystore Filename
  name: AMQ_KEYSTORE
  required: true
  value: broker.ks
- description: Password for accessing SSL keystore
  displayName: AMQ Keystore Password
  name: AMQ_KEYSTORE_PASSWORD
  required: true
- description: The directory to use for data storage
  displayName: AMQ Data Directory
  name: AMQ_DATA_DIR
  value: /opt/amq/data
- description: Use the AMQ Data Directory for logging
  displayName: AMQ Data Directory for logging
  name: AMQ_DATA_DIR_LOGGING
  value: 'true'
- description: Extra arguments for broker creation
  name: AMQ_EXTRA_ARGS
  required: false
- description: Anycast prefix applied to the multiplexed protocol ports 61616 and 61617
  displayName: AMQ Anycast Prefix
  name: AMQ_ANYCAST_PREFIX
  required: false
- description: Multicast prefix applied to the multiplexed protocol ports 61616 and 61617
  displayName: AMQ Multicast Prefix
  name: AMQ_MULTICAST_PREFIX
  required: false
- description: Broker Image
  displayName: Image
  name: IMAGE
  required: true
  value: registry.access.redhat.com/amq-broker-7/amq-broker-72-openshift:1.3
- description: The broker.xml configuration file.
  displayName: broker.xml
  name: BROKER_XML
  value: |-
    <?xml version='1.0'?>
    <!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.
    -->

    <configuration xmlns="urn:activemq"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xmlns:xi="http://www.w3.org/2001/XInclude"
                   xsi:schemaLocation="urn:activemq /schema/artemis-configuration.xsd">

       <core xmlns="urn:activemq:core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="urn:activemq:core ">

          <name>${AMQ_NAME}</name>

          <persistence-enabled>true</persistence-enabled>

          <!-- this could be ASYNCIO, MAPPED, NIO
               ASYNCIO: Linux Libaio
               MAPPED: mmap files
               NIO: Plain Java Files
           -->
          <journal-type>NIO</journal-type>

          <paging-directory>./data/paging</paging-directory>

          <bindings-directory>./data/bindings</bindings-directory>

          <journal-directory>./data/journal</journal-directory>

          <large-messages-directory>./data/large-messages</large-messages-directory>

          <journal-datasync>true</journal-datasync>

          <journal-min-files>2</journal-min-files>

          <journal-pool-files>10</journal-pool-files>

          <journal-file-size>10M</journal-file-size>

          <!--
           This value was determined through a calculation.
           Your system could perform 3.73 writes per millisecond
           on the current journal configuration.
           That translates as a sync write every 268000 nanoseconds.

           Note: If you specify 0 the system will perform writes directly to the disk.
                 We recommend this to be 0 if you are using journalType=MAPPED and journal-datasync=false.
          -->
          <journal-buffer-timeout>268000</journal-buffer-timeout>


          <!--
            When using ASYNCIO, this will determine the writing queue depth for libaio.
           -->
          <journal-max-io>1</journal-max-io>
          <!--
            You can verify the network health of a particular NIC by specifying the <network-check-NIC> element.
             <network-check-NIC>theNicName</network-check-NIC>
            -->

          <!--
            Use this to use an HTTP server to validate the network
             <network-check-URL-list>http://www.apache.org</network-check-URL-list> -->

          <!-- <network-check-period>10000</network-check-period> -->
          <!-- <network-check-timeout>1000</network-check-timeout> -->

          <!-- this is a comma separated list, no spaces, just DNS or IPs
               it should accept IPV6

               Warning: Make sure you understand your network topology as this is meant to validate if your network is valid.
                        Using IPs that could eventually disappear or be partially visible may defeat the purpose.
                        You can use a list of multiple IPs, and if any successful ping will make the server OK to continue running -->
          <!-- <network-check-list>10.0.0.1</network-check-list> -->

          <!-- use this to customize the ping used for ipv4 addresses -->
          <!-- <network-check-ping-command>ping -c 1 -t %d %s</network-check-ping-command> -->

          <!-- use this to customize the ping used for ipv6 addresses -->
          <!-- <network-check-ping6-command>ping6 -c 1 %2$s</network-check-ping6-command> -->



        <connectors>
            <!-- Connector used to be announced through cluster connections and notifications -->
            <connector name="artemis">tcp://${BROKER_IP}:61616</connector>
        </connectors>

          <!-- how often we are looking for how many bytes are being used on the disk in ms -->
          <disk-scan-period>5000</disk-scan-period>

          <!-- once the disk hits this limit the system will block, or close the connection in certain protocols
               that won't support flow control. -->
          <max-disk-usage>90</max-disk-usage>

          <!-- should the broker detect dead locks and other issues -->
          <critical-analyzer>true</critical-analyzer>

          <critical-analyzer-timeout>120000</critical-analyzer-timeout>

          <critical-analyzer-check-period>60000</critical-analyzer-check-period>

          <critical-analyzer-policy>HALT</critical-analyzer-policy>

          <!-- the system will enter into page mode once you hit this limit.
               This is an estimate in bytes of how much the messages are using in memory

                The system will use half of the available memory (-Xmx) by default for the global-max-size.
                You may specify a different value here if you need to customize it to your needs.

                <global-max-size>${AMQ_STORAGE_USAGE_LIMIT}</global-max-size>

          -->

          <acceptors>

             <!-- useEpoll means: it will use Netty epoll if you are on a system (Linux) that supports it -->
             <!-- amqpCredits: The number of credits sent to AMQP producers -->
             <!-- amqpLowCredits: The server will send the # credits specified at amqpCredits at this low mark -->

            <!-- Note: If an acceptor needs to be compatible with HornetQ and/or Artemis 1.x clients add
                        "anycastPrefix=jms.queue.;multicastPrefix=jms.topic." to the acceptor url.
                        See https://issues.apache.org/jira/browse/ARTEMIS-1644 for more information. -->

            <!-- Acceptor for every supported protocol -->
            <acceptor name="artemis">tcp://${BROKER_IP}:61616?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=CORE,AMQP,STOMP,HORNETQ,MQTT,OPENWIRE;useEpoll=true;amqpCredits=1000;amqpLowCredits=300</acceptor>

            <!-- AMQP Acceptor.  Listens on default AMQP port for AMQP traffic.-->
            <acceptor name="amqp">tcp://${BROKER_IP}:5672?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpLowCredits=300</acceptor>

            <acceptor name="artemis-ssl">tcp://${BROKER_IP}:61617?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=CORE,AMQP,STOMP,HORNETQ,MQTT,OPENWIRE;useEpoll=true;amqpCredits=1000;amqpLowCredits=300;connectionsAllowed=1000;sslEnabled=true;keyStorePath=${AMQ_KEYSTORE_TRUSTSTORE_DIR}/${AMQ_KEYSTORE};keyStorePassword=${AMQ_KEYSTORE_PASSWORD}</acceptor>
            <acceptor name="amqp-ssl">tcp://${BROKER_IP}:5671?tcpSendBufferSize=1048576;tcpReceiveBufferSize=1048576;protocols=AMQP;useEpoll=true;amqpCredits=1000;amqpMinCredits=300;connectionsAllowed=1000;sslEnabled=true;keyStorePath=${AMQ_KEYSTORE_TRUSTSTORE_DIR}/${AMQ_KEYSTORE};keyStorePassword=${AMQ_KEYSTORE_PASSWORD}</acceptor>

          </acceptors>


          <cluster-user>${AMQ_CLUSTER_USER}</cluster-user>

          <cluster-password>${AMQ_CLUSTER_PASSWORD}</cluster-password>

          <broadcast-groups>
    <broadcast-group name="my-broadcast-group">          <jgroups-file>jgroups-ping.xml</jgroups-file>          <jgroups-channel>activemq_broadcast_channel</jgroups-channel>          <connector-ref>artemis</connector-ref>       </broadcast-group>
          </broadcast-groups>

          <discovery-groups>
    <discovery-group name="my-discovery-group">          <jgroups-file>jgroups-ping.xml</jgroups-file>          <jgroups-channel>activemq_broadcast_channel</jgroups-channel>          <refresh-timeout>10000</refresh-timeout>       </discovery-group>
          </discovery-groups>

          <cluster-connections>
    <cluster-connection name="my-cluster">          <connector-ref>artemis</connector-ref>          <retry-interval>1000</retry-interval>          <retry-interval-multiplier>2</retry-interval-multiplier>          <max-retry-interval>32000</max-retry-interval>          <initial-connect-attempts>20</initial-connect-attempts>        <reconnect-attempts>10</reconnect-attempts>          <use-duplicate-detection>true</use-duplicate-detection>          <message-load-balancing>ON_DEMAND</message-load-balancing>          <max-hops>1</max-hops>          <discovery-group-ref discovery-group-name="my-discovery-group"/>       </cluster-connection>
          </cluster-connections>


          <security-settings>
             <security-setting match="#">
                <permission type="createNonDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="deleteNonDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="createDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="deleteDurableQueue" roles="${AMQ_ROLE}"/>
                <permission type="createAddress" roles="${AMQ_ROLE}"/>
                <permission type="deleteAddress" roles="${AMQ_ROLE}"/>
                <permission type="consume" roles="${AMQ_ROLE}"/>
                <permission type="browse" roles="${AMQ_ROLE}"/>
                <permission type="send" roles="${AMQ_ROLE}"/>
                <!-- we need this otherwise ./artemis data imp wouldn't work -->
                <permission type="manage" roles="${AMQ_ROLE}"/>
             </security-setting>
          </security-settings>

          <address-settings>
             <!-- if you define auto-create on certain queues, management has to be auto-create -->
             <address-setting match="activemq.management#">
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- with -1 only the global-max-size is in use for limiting -->
                <max-size-bytes>-1</max-size-bytes>
                <message-counter-history-day-limit>10</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-create-jms-queues>true</auto-create-jms-queues>
                <auto-create-jms-topics>true</auto-create-jms-topics>
             </address-setting>
             <!--default for catch all-->
             <address-setting match="#">
                <redistribution-delay>0</redistribution-delay>
                <dead-letter-address>DLQ</dead-letter-address>
                <expiry-address>ExpiryQueue</expiry-address>
                <redelivery-delay>0</redelivery-delay>
                <!-- with -1 only the global-max-size is in use for limiting -->
                <max-size-bytes>-1</max-size-bytes>
                <message-counter-history-day-limit>10</message-counter-history-day-limit>
                <address-full-policy>PAGE</address-full-policy>
                <auto-create-queues>true</auto-create-queues>
                <auto-create-addresses>true</auto-create-addresses>
                <auto-create-jms-queues>true</auto-create-jms-queues>
                <auto-create-jms-topics>true</auto-create-jms-topics>
             </address-setting>
          </address-settings>

          <addresses>
             <address name="DLQ">
                <anycast>
                   <queue name="DLQ" />
                </anycast>
             </address>
             <address name="ExpiryQueue">
                <anycast>
                   <queue name="ExpiryQueue" />
                </anycast>
             </address>

          </addresses>


          <!-- Uncomment the following if you want to use the Standard LoggingActiveMQServerPlugin pluging to log in events
          <broker-plugins>
            <broker-plugin class-name="org.apache.activemq.artemis.core.server.plugin.impl.LoggingActiveMQServerPlugin">
                <property key="LOG_ALL_EVENTS" value="true"/>
                <property key="LOG_CONNECTION_EVENTS" value="true"/>
                <property key="LOG_SESSION_EVENTS" value="true"/>
                <property key="LOG_CONSUMER_EVENTS" value="true"/>
                <property key="LOG_DELIVERING_EVENTS" value="true"/>
                <property key="LOG_SENDING_EVENTS" value="true"/>
                <property key="LOG_INTERNAL_EVENTS" value="true"/>
            </broker-plugin>
          </broker-plugins>
          -->

       </core>
    </configuration>

